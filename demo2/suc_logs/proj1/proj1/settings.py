"""
Django settings for proj1 project.

Generated by 'django-admin startproject' using Django 4.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""



import os
from pathlib import Path
from app1.apps import App1Config

from . import opentelemetry_config

# import logging.config
# from .opentelemetry_config import LOGGING_CONFIG

# Apply logging configuration
# logging.config.dictConfig(LOGGING_CONFIG)


# Now you can use App1Config in your code


# In your Django settings.py file

# LOGGING = {
#     'version': 1,
#     'handlers': {
#         'http_handler': {
#             'level': 'DEBUG',
#             'class': 'logging.handlers.HTTPHandler',
#             'host': '127.0.0.1:9595',
#             'url': '/otel-service/export/log',
#             'method': 'POST',
#             'secure': True,
#             'credentials': ('otelforwarderuser', 'Forwarder-SnappyFlow-Agent@7$'),  # Optional
#         },
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['http_handler'],
#             'level': 'DEBUG',
#             'propagate': True,
#         },
#     },
# }



# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-42i!byb6_t(vr9y0^ue1!fvl6(+bo%by!(#z*qt=ni8^#6orm)'

# SECURITY WARNING: don't run with debug turned on in production!
#DEBUG = False
#ALLOWED_HOSTS = ['yourdomain.com', 'subdomain.yourdomain.com', ]
ALLOWED_HOSTS = ['localhost', '127.0.0.1']


# Application definition

INSTALLED_APPS = [
    
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'app1',
    # 'elasticapm.contrib.django',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'elasticapm.contrib.django.middleware.TracingMiddleware',
]

ROOT_URLCONF = 'proj1.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'proj1.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'handlers': {
#         'file': {
#             'level': 'DEBUG',
#             'class': 'logging.FileHandler',
#             'filename': 'api.log',
#         },
#     },
#     'root': {
#         'handlers': ['file'],
#         'level': 'DEBUG',
#     },
# }
ELASTIC_APM = {
   # ...
   'DEBUG': True,
}

# sf = Snappyflow()

'''
# Function to access __CP_ENCRYPTED_KEY
def access_encrypted_key(instance):
    return instance._Snappyflow__CP_ENCRYPTED_KEY
    #pass

# Create an instance of Snappyflow


# Access __CP_ENCRYPTED_KEY using the function
encrypted_key = access_encrypted_key(sf)

print(encrypted_key)
'''
'''

try: 
   # Initialize Snappyflow. By default intialization will take profileKey, projectName and appName from sfagent config.yaml
   #sf = Snappyflow()  
  # Add below part to manually configure the initialization 
    SF_PROJECT_NAME = os.getenv('SF_PROJECT_NAME') 
    SF_APP_NAME = os.getenv('SF_APP_NAME') 
    SF_PROFILE_KEY = os.getenv('SF_PROFILE_KEY') 
    sf.init(SF_PROFILE_KEY, SF_PROJECT_NAME, SF_APP_NAME) 
       # End of manual configuration   
    SFTRACE_CONFIG = sf.get_trace_config()

    ELASTIC_APM={ 
      # Specify your service name for tracing 
      'SERVICE_NAME': "custom-service" , 
      'SERVER_URL': SFTRACE_CONFIG.get('SFTRACE_SERVER_URL'), 
      'GLOBAL_LABELS': SFTRACE_CONFIG.get('SFTRACE_GLOBAL_LABELS'), 
      'VERIFY_SERVER_CERT': SFTRACE_CONFIG.get('SFTRACE_VERIFY_SERVER_CERT'), 
      'SPAN_FRAMES_MIN_DURATION':    SFTRACE_CONFIG.get('SFTRACE_SPAN_FRAMES_MIN_DURATION'), 
      'STACK_TRACE_LIMIT': SFTRACE_CONFIG.get('SFTRACE_STACK_TRACE_LIMIT'), 
      'CAPTURE_SPAN_STACK_TRACES': SFTRACE_CONFIG.get('SFTRACE_CAPTURE_SPAN_STACK_TRACES'), 
      'DJANGO_TRANSACTION_NAME_FROM_ROUTE': True, 
      'CENTRAL_CONFIG': False, 
      'METRICS_INTERVAL': '0s',
      'LOG_LEVEL' : 'info'
   } 
except Exception as error: 
    print("Error while fetching snappyflow tracing configurations", error) 


print(ELASTIC_APM)

from django.conf import settings

if settings.DEBUG:
    # Code to execute when DEBUG is True
    print("DEBUG is True")
else:
    # Code to execute when DEBUG is False
    print("DEBUG is False")
    
'''
